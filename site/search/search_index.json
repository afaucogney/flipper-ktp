{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Flipper Ktp \u00b6 Flipper Ktp is plugin for Flipper to analyse Toothpick DI (aka KTP) runtime scope tree. Flipper Ktp plugin give you a unique runtime experience to see the toothpick scope tree of your running app. Get started!","title":"Overview"},{"location":"#welcome-to-flipper-ktp","text":"Flipper Ktp is plugin for Flipper to analyse Toothpick DI (aka KTP) runtime scope tree. Flipper Ktp plugin give you a unique runtime experience to see the toothpick scope tree of your running app. Get started!","title":"Welcome to Flipper Ktp"},{"location":"changelog/","text":"","title":"Change Log"},{"location":"dev-env/","text":"Dev Environment for LeakCanary contributors \u00b6 Setup \u00b6 Download Android Studio . We use two spaces code indentation, use SquareAndroid code style settings from https://github.com/square/java-code-styles . Build with ./gradlew build . Running the failing UI tests to confirm leak detection correctly fails UI tests: ./gradlew leakcanary-android-sample:connectedCheck . Normal UI tests: ./gradlew leakcanary-android-core:connectedCheck . Static Code Analysis \u00b6 LeakCanary uses Detekt for static Code analysis. Analyze the entire project with ./gradlew check or particular modules with ./gradlew :module-name:check . Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote . There\u2019s also a git pre-push hook that will run analysis automatically before pushing a branch to the remote. If there are any violations - it will prevent the push. Fix the issues! You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. Detekt report will be printed in the console and saved to /moduleDir/build/reports/ . Deploying locally \u00b6 To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository: ./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository Then add the SNAPSHOT dependency and mavenLocal() repository to your project: dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:0.1.1-SNAPSHOT' } repositories { mavenLocal() } Deploying the docs locally \u00b6 Installing the markdownextradata plugin: pip install mkdocs-markdownextradata-plugin Deploying locally mkdocs serve","title":"Dev Environment"},{"location":"dev-env/#dev-environment-for-leakcanary-contributors","text":"","title":"Dev Environment for LeakCanary contributors"},{"location":"dev-env/#setup","text":"Download Android Studio . We use two spaces code indentation, use SquareAndroid code style settings from https://github.com/square/java-code-styles . Build with ./gradlew build . Running the failing UI tests to confirm leak detection correctly fails UI tests: ./gradlew leakcanary-android-sample:connectedCheck . Normal UI tests: ./gradlew leakcanary-android-core:connectedCheck .","title":"Setup"},{"location":"dev-env/#static-code-analysis","text":"LeakCanary uses Detekt for static Code analysis. Analyze the entire project with ./gradlew check or particular modules with ./gradlew :module-name:check . Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote . There\u2019s also a git pre-push hook that will run analysis automatically before pushing a branch to the remote. If there are any violations - it will prevent the push. Fix the issues! You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. Detekt report will be printed in the console and saved to /moduleDir/build/reports/ .","title":"Static Code Analysis"},{"location":"dev-env/#deploying-locally","text":"To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository: ./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository Then add the SNAPSHOT dependency and mavenLocal() repository to your project: dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:0.1.1-SNAPSHOT' } repositories { mavenLocal() }","title":"Deploying locally"},{"location":"dev-env/#deploying-the-docs-locally","text":"Installing the markdownextradata plugin: pip install mkdocs-markdownextradata-plugin Deploying locally mkdocs serve","title":"Deploying the docs locally"},{"location":"faq/","text":"","title":"FAQ"},{"location":"fundamentals-how-flipper-ktp-works/","text":"","title":"How Flipper-Ktp works"},{"location":"fundamentals-how-flipper-works/","text":"","title":"How Flipper works"},{"location":"fundamentals-how-ktp-works/","text":"","title":"How Ktp works"},{"location":"fundamentals/","text":"","title":"Introduction"},{"location":"getting_started/","text":"","title":"Getting Started"},{"location":"how_to_help/","text":"How to help \u00b6 \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f Flipper Ktp is maintained by volunteers. Your help is welcome and will benefit the entire Android community! Here\u2019s how you can help: Contribute to Help Wanted issues. Answer StackOverflow questions . Provide feedback on pull requests . Contribute code by forking the repository on GitHub and sending a pull request. Please read Dev Environment for Flipper Ktp contributors . When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.","title":"How to help"},{"location":"how_to_help/#how-to-help","text":"\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f Flipper Ktp is maintained by volunteers. Your help is welcome and will benefit the entire Android community! Here\u2019s how you can help: Contribute to Help Wanted issues. Answer StackOverflow questions . Provide feedback on pull requests . Contribute code by forking the repository on GitHub and sending a pull request. Please read Dev Environment for Flipper Ktp contributors . When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.","title":"How to help"},{"location":"recipes/","text":"","title":"Code recipes"},{"location":"releasing/","text":"Releasing LeakCanary \u00b6 Make sure you have the docsite Google Analytics key set up in your ~/.bashrc : export LEAKCANARY_GOOGLE_ANALYTICS_KEY=\"UA-_________\" Create a local release branch from main git checkout main git pull git checkout -b release_0.1.1 Update VERSION_NAME in gradle.properties (remove -SNAPSHOT ) VERSION_NAME=0.1.1 Update the current version and next version in mkdocs.yml : extra: flipper_ktp: release: '0.1.1' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Generate the Dokka docs rm -rf docs/api ./gradlew leakcanary-android-core:dokka leakcanary-android-instrumentation:dokka leakcanary-android-process:dokka leakcanary-object-watcher-android:dokka leakcanary-object-watcher:dokka shark-android:dokka shark-graph:dokka shark-hprof:dokka shark-log:dokka shark:dokka plumber-android:dokka Confirm all API changes are intentional git diff docs/api Update docs/changelog.md after checking out all changes: https://github.com/square/leakcanary/compare/v0.1.0...main Take one last look git diff Commit all local changes git commit -am \"Prepare 0.1.1 release\" Perform a clean build ./gradlew clean ./gradlew build Create a tag and push it git tag v0.1.1 git push origin v0.1.1 Make sure you have valid credentials in ~/.gradle/gradle.properties to upload the artifacts SONATYPE_NEXUS_USERNAME= SONATYPE_NEXUS_PASSWORD= Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Generate the CLI zip ./gradlew shark-cli:distZip Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Scroll to the bottom, you should see an entry named comsquareup-XXXX Check the box next to the comsquareup-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the comsquareup-XXXX entry, click Release then Confirm Merge the release branch to main git checkout main git pull git merge --no-ff release_0.1.1 Update VERSION_NAME in gradle.properties (increase version and add -SNAPSHOT ) VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push Go to Milestones , close the corresponding milestones and create a new milestone. Wait for the release to be available on Maven Central . Redeploy the docs: mkdocs serve to check locally, mkdocs gh-deploy to deploy. Go to the Draft a new release page, enter the release name (v0.1.1) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. See [Change Log](https://square.github.io/leakcanary/changelog#version-20-alpha-2-2019-05-21) Add the CLIP zip from shark-cli/build/distributions/ to the release. Make a pull request to brew . Just execute brew bump-formula-pr --url https://github.com/square/leakcanary/releases/download/v0.1.1/shark-cli-0.1.1.zip leakcanary-shark (The url parameter should point at zip from this new release). In case of problems, read brew docs . Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.","title":"Releasing"},{"location":"releasing/#releasing-leakcanary","text":"Make sure you have the docsite Google Analytics key set up in your ~/.bashrc : export LEAKCANARY_GOOGLE_ANALYTICS_KEY=\"UA-_________\" Create a local release branch from main git checkout main git pull git checkout -b release_0.1.1 Update VERSION_NAME in gradle.properties (remove -SNAPSHOT ) VERSION_NAME=0.1.1 Update the current version and next version in mkdocs.yml : extra: flipper_ktp: release: '0.1.1' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Generate the Dokka docs rm -rf docs/api ./gradlew leakcanary-android-core:dokka leakcanary-android-instrumentation:dokka leakcanary-android-process:dokka leakcanary-object-watcher-android:dokka leakcanary-object-watcher:dokka shark-android:dokka shark-graph:dokka shark-hprof:dokka shark-log:dokka shark:dokka plumber-android:dokka Confirm all API changes are intentional git diff docs/api Update docs/changelog.md after checking out all changes: https://github.com/square/leakcanary/compare/v0.1.0...main Take one last look git diff Commit all local changes git commit -am \"Prepare 0.1.1 release\" Perform a clean build ./gradlew clean ./gradlew build Create a tag and push it git tag v0.1.1 git push origin v0.1.1 Make sure you have valid credentials in ~/.gradle/gradle.properties to upload the artifacts SONATYPE_NEXUS_USERNAME= SONATYPE_NEXUS_PASSWORD= Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Generate the CLI zip ./gradlew shark-cli:distZip Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Scroll to the bottom, you should see an entry named comsquareup-XXXX Check the box next to the comsquareup-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the comsquareup-XXXX entry, click Release then Confirm Merge the release branch to main git checkout main git pull git merge --no-ff release_0.1.1 Update VERSION_NAME in gradle.properties (increase version and add -SNAPSHOT ) VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push Go to Milestones , close the corresponding milestones and create a new milestone. Wait for the release to be available on Maven Central . Redeploy the docs: mkdocs serve to check locally, mkdocs gh-deploy to deploy. Go to the Draft a new release page, enter the release name (v0.1.1) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. See [Change Log](https://square.github.io/leakcanary/changelog#version-20-alpha-2-2019-05-21) Add the CLIP zip from shark-cli/build/distributions/ to the release. Make a pull request to brew . Just execute brew bump-formula-pr --url https://github.com/square/leakcanary/releases/download/v0.1.1/shark-cli-0.1.1.zip leakcanary-shark (The url parameter should point at zip from this new release). In case of problems, read brew docs . Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.","title":"Releasing LeakCanary"},{"location":"support/","text":"","title":"Support"},{"location":"api/flipper-ktp/","text":"flipper-ktp Packages \u00b6 Name Summary fr.afaucogney.mobile.flipper Index \u00b6 All Types","title":"Index"},{"location":"api/flipper-ktp/#packages","text":"Name Summary fr.afaucogney.mobile.flipper","title":"Packages"},{"location":"api/flipper-ktp/#index","text":"All Types","title":"Index"},{"location":"api/flipper-ktp/alltypes/","text":"All Types \u00b6 Name Summary fr.afaucogney.mobile.flipper.KtpFlipperPlugin \u00b6 A Flipper Plugin for Ktp","title":"Index"},{"location":"api/flipper-ktp/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/flipper-ktp/alltypes/#frafaucogneymobileflipperktpflipperplugin","text":"A Flipper Plugin for Ktp","title":"fr.afaucogney.mobile.flipper.KtpFlipperPlugin"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/","text":"flipper-ktp / fr.afaucogney.mobile.flipper Package fr.afaucogney.mobile.flipper \u00b6 Types \u00b6 Name Summary KtpFlipperPlugin A Flipper Plugin for Ktp class KtpFlipperPlugin : FlipperPlugin","title":"Index"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/#package-frafaucogneymobileflipper","text":"","title":"Package fr.afaucogney.mobile.flipper"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/#types","text":"Name Summary KtpFlipperPlugin A Flipper Plugin for Ktp class KtpFlipperPlugin : FlipperPlugin","title":"Types"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin KtpFlipperPlugin \u00b6 class KtpFlipperPlugin : FlipperPlugin A Flipper Plugin for Ktp is a plugin for Flipper to analyse Toothpick DI (aka KTP) runtime scope tree. Constructors \u00b6 Name Summary <init> A Flipper Plugin for Ktp KtpFlipperPlugin() Functions \u00b6 Name Summary getId fun getId(): String onConnect fun onConnect(connection: FlipperConnection?): Unit onDisconnect fun onDisconnect(): Unit runInBackground fun runInBackground(): Boolean","title":"Index"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/#ktpflipperplugin","text":"class KtpFlipperPlugin : FlipperPlugin A Flipper Plugin for Ktp is a plugin for Flipper to analyse Toothpick DI (aka KTP) runtime scope tree.","title":"KtpFlipperPlugin"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/#constructors","text":"Name Summary <init> A Flipper Plugin for Ktp KtpFlipperPlugin()","title":"Constructors"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/#functions","text":"Name Summary getId fun getId(): String onConnect fun onConnect(connection: FlipperConnection?): Unit onDisconnect fun onDisconnect(): Unit runInBackground fun runInBackground(): Boolean","title":"Functions"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/-init-/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin / <init> <init> \u00b6 KtpFlipperPlugin() A Flipper Plugin for Ktp is a plugin for Flipper to analyse Toothpick DI (aka KTP) runtime scope tree.","title":" init "},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/-init-/#init","text":"KtpFlipperPlugin() A Flipper Plugin for Ktp is a plugin for Flipper to analyse Toothpick DI (aka KTP) runtime scope tree.","title":"&lt;init&gt;"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/get-id/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin / getId getId \u00b6 fun getId(): String","title":"Get id"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/get-id/#getid","text":"fun getId(): String","title":"getId"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/on-connect/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin / onConnect onConnect \u00b6 fun onConnect(connection: FlipperConnection?): Unit","title":"On connect"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/on-connect/#onconnect","text":"fun onConnect(connection: FlipperConnection?): Unit","title":"onConnect"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/on-disconnect/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin / onDisconnect onDisconnect \u00b6 fun onDisconnect(): Unit","title":"On disconnect"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/on-disconnect/#ondisconnect","text":"fun onDisconnect(): Unit","title":"onDisconnect"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/run-in-background/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin / runInBackground runInBackground \u00b6 fun runInBackground(): Boolean","title":"Run in background"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/run-in-background/#runinbackground","text":"fun runInBackground(): Boolean","title":"runInBackground"}]}