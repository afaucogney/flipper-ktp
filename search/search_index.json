{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Flipper Ktp Flipper Ktp is plugin for Flipper to analyse Toothpick DI (aka KTP) runtime scope tree. Flipper Ktp plugin give you a unique runtime experience to see the toothpick scope tree of your running app. Get started!","title":"Overview"},{"location":"#welcome-to-flipper-ktp","text":"Flipper Ktp is plugin for Flipper to analyse Toothpick DI (aka KTP) runtime scope tree. Flipper Ktp plugin give you a unique runtime experience to see the toothpick scope tree of your running app. Get started!","title":"Welcome to Flipper Ktp"},{"location":"changelog/","text":"Version 0.1.0 Sdk First Ftp plugin implementation At connection, the sdk shows ktp scope tree Build Add Mkdocs setup Deploy gh-pages Deplay artifact to jitpack","title":"Version 0.1.0"},{"location":"changelog/#version-010","text":"Sdk First Ftp plugin implementation At connection, the sdk shows ktp scope tree Build Add Mkdocs setup Deploy gh-pages Deplay artifact to jitpack","title":"Version 0.1.0"},{"location":"dev-env/","text":"Dev Environment for LeakCanary contributors Setup Download Android Studio . We use two spaces code indentation, use SquareAndroid code style settings from https://github.com/square/java-code-styles. Build with ./gradlew build . Running the failing UI tests to confirm leak detection correctly fails UI tests: ./gradlew leakcanary-android-sample:connectedCheck . Normal UI tests: ./gradlew leakcanary-android-core:connectedCheck . Static Code Analysis LeakCanary uses Detekt for static Code analysis. Analyze the entire project with ./gradlew check or particular modules with ./gradlew :module-name:check . Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote . There's also a git pre-push hook that will run analysis automatically before pushing a branch to the remote. If there are any violations - it will prevent the push. Fix the issues! You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. Detekt report will be printed in the console and saved to /moduleDir/build/reports/ . Deploying locally To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository: ./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository Then add the SNAPSHOT dependency and mavenLocal() repository to your project: dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:{{ flipper_ktp.next_release }}-SNAPSHOT' } repositories { mavenLocal() } Deploying the docs locally Installing the markdownextradata plugin: pip install mkdocs-markdownextradata-plugin Deploying locally mkdocs serve","title":"Dev Environment for LeakCanary contributors"},{"location":"dev-env/#dev-environment-for-leakcanary-contributors","text":"","title":"Dev Environment for LeakCanary contributors"},{"location":"dev-env/#setup","text":"Download Android Studio . We use two spaces code indentation, use SquareAndroid code style settings from https://github.com/square/java-code-styles. Build with ./gradlew build . Running the failing UI tests to confirm leak detection correctly fails UI tests: ./gradlew leakcanary-android-sample:connectedCheck . Normal UI tests: ./gradlew leakcanary-android-core:connectedCheck .","title":"Setup"},{"location":"dev-env/#static-code-analysis","text":"LeakCanary uses Detekt for static Code analysis. Analyze the entire project with ./gradlew check or particular modules with ./gradlew :module-name:check . Detekt will fail the build if any ruleset violations are found. You should fix all issues before pushing the branch to remote . There's also a git pre-push hook that will run analysis automatically before pushing a branch to the remote. If there are any violations - it will prevent the push. Fix the issues! You can bypass the git hook though; Travis CI will still run checks and will fail if any violations are found. Detekt report will be printed in the console and saved to /moduleDir/build/reports/ .","title":"Static Code Analysis"},{"location":"dev-env/#deploying-locally","text":"To deploy LeakCanary to your local maven repository, run the following command, changing the path to the path of your local repository: ./gradlew uploadArchives -PSNAPSHOT_REPOSITORY_URL=file:///Users/py/.m2/repository Then add the SNAPSHOT dependency and mavenLocal() repository to your project: dependencies { debugImplementation 'com.squareup.leakcanary:leakcanary-android:{{ flipper_ktp.next_release }}-SNAPSHOT' } repositories { mavenLocal() }","title":"Deploying locally"},{"location":"dev-env/#deploying-the-docs-locally","text":"Installing the markdownextradata plugin: pip install mkdocs-markdownextradata-plugin Deploying locally mkdocs serve","title":"Deploying the docs locally"},{"location":"faq/","text":"","title":"Faq"},{"location":"fundamentals-how-flipper-ktp-works/","text":"","title":"Fundamentals how flipper ktp works"},{"location":"fundamentals-how-flipper-works/","text":"","title":"Fundamentals how flipper works"},{"location":"fundamentals-how-ktp-works/","text":"","title":"Fundamentals how ktp works"},{"location":"fundamentals/","text":"","title":"Fundamentals"},{"location":"getting_started/","text":"","title":"Getting started"},{"location":"how_to_help/","text":"How to help \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f Flipper Ktp is maintained by volunteers. Your help is welcome and will benefit the entire Android community! Here's how you can help: Contribute to Help Wanted issues. Answer StackOverflow questions . Provide feedback on pull requests . Contribute code by forking the repository on GitHub and sending a pull request. Please read Dev Environment for Flipper Ktp contributors . When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.","title":"How to help"},{"location":"how_to_help/#how-to-help","text":"\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f Flipper Ktp is maintained by volunteers. Your help is welcome and will benefit the entire Android community! Here's how you can help: Contribute to Help Wanted issues. Answer StackOverflow questions . Provide feedback on pull requests . Contribute code by forking the repository on GitHub and sending a pull request. Please read Dev Environment for Flipper Ktp contributors . When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible.","title":"How to help"},{"location":"recipes/","text":"","title":"Recipes"},{"location":"releasing/","text":"Releasing LeakCanary Make sure you have the docsite Google Analytics key set up in your ~/.bashrc : export LEAKCANARY_GOOGLE_ANALYTICS_KEY=\"UA-_________\" Create a local release branch from main git checkout main git pull git checkout -b release_{{ flipper_ktp.next_release }} Update VERSION_NAME in gradle.properties (remove -SNAPSHOT ) VERSION_NAME={{ flipper_ktp.next_release }} Update the current version and next version in mkdocs.yml : extra: flipper_ktp: release: '{{ flipper_ktp.next_release }}' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Generate the Dokka docs rm -rf docs/api ./gradlew leakcanary-android-core:dokka leakcanary-android-instrumentation:dokka leakcanary-android-process:dokka leakcanary-object-watcher-android:dokka leakcanary-object-watcher:dokka shark-android:dokka shark-graph:dokka shark-hprof:dokka shark-log:dokka shark:dokka plumber-android:dokka Confirm all API changes are intentional git diff docs/api Update docs/changelog.md after checking out all changes: https://github.com/square/leakcanary/compare/v{{ flipper_ktp.release }}...main Take one last look git diff Commit all local changes git commit -am \"Prepare {{ flipper_ktp.next_release }} release\" Perform a clean build ./gradlew clean ./gradlew build Create a tag and push it git tag v{{ flipper_ktp.next_release }} git push origin v{{ flipper_ktp.next_release }} Make sure you have valid credentials in ~/.gradle/gradle.properties to upload the artifacts SONATYPE_NEXUS_USERNAME= SONATYPE_NEXUS_PASSWORD= Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Generate the CLI zip ./gradlew shark-cli:distZip Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Scroll to the bottom, you should see an entry named comsquareup-XXXX Check the box next to the comsquareup-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the comsquareup-XXXX entry, click Release then Confirm Merge the release branch to main git checkout main git pull git merge --no-ff release_{{ flipper_ktp.next_release }} Update VERSION_NAME in gradle.properties (increase version and add -SNAPSHOT ) VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push Go to Milestones , close the corresponding milestones and create a new milestone. Wait for the release to be available on Maven Central . Redeploy the docs: mkdocs serve to check locally, mkdocs gh-deploy to deploy. Go to the Draft a new release page, enter the release name (v{{ flipper_ktp.next_release }}) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. See [Change Log](https://square.github.io/leakcanary/changelog#version-20-alpha-2-2019-05-21) Add the CLIP zip from shark-cli/build/distributions/ to the release. Make a pull request to brew . Just execute brew bump-formula-pr --url https://github.com/square/leakcanary/releases/download/v{{ flipper_ktp.next_release }}/shark-cli-{{ flipper_ktp.next_release }}.zip leakcanary-shark (The url parameter should point at zip from this new release). In case of problems, read brew docs . * Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.","title":"Releasing LeakCanary"},{"location":"releasing/#releasing-leakcanary","text":"Make sure you have the docsite Google Analytics key set up in your ~/.bashrc : export LEAKCANARY_GOOGLE_ANALYTICS_KEY=\"UA-_________\" Create a local release branch from main git checkout main git pull git checkout -b release_{{ flipper_ktp.next_release }} Update VERSION_NAME in gradle.properties (remove -SNAPSHOT ) VERSION_NAME={{ flipper_ktp.next_release }} Update the current version and next version in mkdocs.yml : extra: flipper_ktp: release: '{{ flipper_ktp.next_release }}' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Generate the Dokka docs rm -rf docs/api ./gradlew leakcanary-android-core:dokka leakcanary-android-instrumentation:dokka leakcanary-android-process:dokka leakcanary-object-watcher-android:dokka leakcanary-object-watcher:dokka shark-android:dokka shark-graph:dokka shark-hprof:dokka shark-log:dokka shark:dokka plumber-android:dokka Confirm all API changes are intentional git diff docs/api Update docs/changelog.md after checking out all changes: https://github.com/square/leakcanary/compare/v{{ flipper_ktp.release }}...main Take one last look git diff Commit all local changes git commit -am \"Prepare {{ flipper_ktp.next_release }} release\" Perform a clean build ./gradlew clean ./gradlew build Create a tag and push it git tag v{{ flipper_ktp.next_release }} git push origin v{{ flipper_ktp.next_release }} Make sure you have valid credentials in ~/.gradle/gradle.properties to upload the artifacts SONATYPE_NEXUS_USERNAME= SONATYPE_NEXUS_PASSWORD= Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Generate the CLI zip ./gradlew shark-cli:distZip Release to Maven Central Login to Sonatype OSS Nexus: https://oss.sonatype.org/ Click on Staging Repositories Scroll to the bottom, you should see an entry named comsquareup-XXXX Check the box next to the comsquareup-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the comsquareup-XXXX entry, click Release then Confirm Merge the release branch to main git checkout main git pull git merge --no-ff release_{{ flipper_ktp.next_release }} Update VERSION_NAME in gradle.properties (increase version and add -SNAPSHOT ) VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT Commit your changes git commit -am \"Prepare for next development iteration\" Push your changes git push Go to Milestones , close the corresponding milestones and create a new milestone. Wait for the release to be available on Maven Central . Redeploy the docs: mkdocs serve to check locally, mkdocs gh-deploy to deploy. Go to the Draft a new release page, enter the release name (v{{ flipper_ktp.next_release }}) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site. See [Change Log](https://square.github.io/leakcanary/changelog#version-20-alpha-2-2019-05-21) Add the CLIP zip from shark-cli/build/distributions/ to the release. Make a pull request to brew . Just execute brew bump-formula-pr --url https://github.com/square/leakcanary/releases/download/v{{ flipper_ktp.next_release }}/shark-cli-{{ flipper_ktp.next_release }}.zip leakcanary-shark (The url parameter should point at zip from this new release). In case of problems, read brew docs . * Tell your friends, update all of your apps, and tweet the new release. As a nice extra touch, mention external contributions.","title":"Releasing LeakCanary"},{"location":"support/","text":"","title":"Support"},{"location":"api/flipper-ktp/","text":"flipper-ktp Packages Name Summary fr.afaucogney.mobile.flipper Index All Types","title":"Index"},{"location":"api/flipper-ktp/#packages","text":"Name Summary fr.afaucogney.mobile.flipper","title":"Packages"},{"location":"api/flipper-ktp/#index","text":"All Types","title":"Index"},{"location":"api/flipper-ktp/alltypes/","text":"All Types Name Summary fr.afaucogney.mobile.flipper.BuildConfig fr.afaucogney.mobile.flipper.BuildConfig fr.afaucogney.mobile.flipper.KtpFlipperPlugin A Flipper Plugin for Ktp.","title":"Index"},{"location":"api/flipper-ktp/alltypes/#all-types","text":"Name Summary fr.afaucogney.mobile.flipper.BuildConfig fr.afaucogney.mobile.flipper.BuildConfig fr.afaucogney.mobile.flipper.KtpFlipperPlugin A Flipper Plugin for Ktp.","title":"All Types"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/","text":"flipper-ktp / fr.afaucogney.mobile.flipper Package fr.afaucogney.mobile.flipper Types Name Summary BuildConfig class BuildConfig class BuildConfig KtpFlipperPlugin class KtpFlipperPlugin : FlipperPlugin A Flipper Plugin for Ktp.","title":"Index"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/#package-frafaucogneymobileflipper","text":"","title":"Package fr.afaucogney.mobile.flipper"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/#types","text":"Name Summary BuildConfig class BuildConfig class BuildConfig KtpFlipperPlugin class KtpFlipperPlugin : FlipperPlugin A Flipper Plugin for Ktp.","title":"Types"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-build-config/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / BuildConfig BuildConfig class BuildConfig class BuildConfig","title":"Index"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-build-config/#buildconfig","text":"class BuildConfig class BuildConfig","title":"BuildConfig"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-build-config/-b-u-i-l-d_-t-y-p-e/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / BuildConfig / BUILD_TYPE BUILD_TYPE static val BUILD_TYPE: String static val BUILD_TYPE: String","title":" b u i l d  t y p e"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-build-config/-b-u-i-l-d_-t-y-p-e/#build_type","text":"static val BUILD_TYPE: String static val BUILD_TYPE: String","title":"BUILD_TYPE"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-build-config/-d-e-b-u-g/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / BuildConfig / DEBUG DEBUG static val DEBUG: Boolean static val DEBUG: Boolean","title":" d e b u g"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-build-config/-d-e-b-u-g/#debug","text":"static val DEBUG: Boolean static val DEBUG: Boolean","title":"DEBUG"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-build-config/-init-/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / BuildConfig / <init> <init> BuildConfig() BuildConfig()","title":" init "},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-build-config/-init-/#init","text":"BuildConfig() BuildConfig()","title":"&lt;init&gt;"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-build-config/-l-i-b-r-a-r-y_-p-a-c-k-a-g-e_-n-a-m-e/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / BuildConfig / LIBRARY_PACKAGE_NAME LIBRARY_PACKAGE_NAME static val LIBRARY_PACKAGE_NAME: String static val LIBRARY_PACKAGE_NAME: String","title":" l i b r a r y  p a c k a g e  n a m e"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-build-config/-l-i-b-r-a-r-y_-p-a-c-k-a-g-e_-n-a-m-e/#library_package_name","text":"static val LIBRARY_PACKAGE_NAME: String static val LIBRARY_PACKAGE_NAME: String","title":"LIBRARY_PACKAGE_NAME"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin KtpFlipperPlugin class KtpFlipperPlugin : FlipperPlugin A Flipper Plugin for Ktp. KtpFlipperPlugin is a plugin for @see Flipper to analyse @see Toothpick-di (aka KTP, @see) runtime app scope tree. Constructors Name Summary <init> KtpFlipperPlugin() A Flipper Plugin for Ktp. Functions Name Summary getId fun getId(): String Setup the unique id of the plugin onConnect fun onConnect(connection: FlipperConnection?): Unit onConnect is triggered every time the plugin is shown on Flipper It does keep the connection And parse Ktp scope tree to then push it to the Desktop Flipper Client onDisconnect fun onDisconnect(): Unit Release the connection runInBackground fun runInBackground(): Boolean Plugin doesn't run in background","title":"Index"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/#ktpflipperplugin","text":"class KtpFlipperPlugin : FlipperPlugin A Flipper Plugin for Ktp. KtpFlipperPlugin is a plugin for @see Flipper to analyse @see Toothpick-di (aka KTP, @see) runtime app scope tree.","title":"KtpFlipperPlugin"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/#constructors","text":"Name Summary <init> KtpFlipperPlugin() A Flipper Plugin for Ktp.","title":"Constructors"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/#functions","text":"Name Summary getId fun getId(): String Setup the unique id of the plugin onConnect fun onConnect(connection: FlipperConnection?): Unit onConnect is triggered every time the plugin is shown on Flipper It does keep the connection And parse Ktp scope tree to then push it to the Desktop Flipper Client onDisconnect fun onDisconnect(): Unit Release the connection runInBackground fun runInBackground(): Boolean Plugin doesn't run in background","title":"Functions"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/-init-/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin / <init> <init> KtpFlipperPlugin() A Flipper Plugin for Ktp. KtpFlipperPlugin is a plugin for @see Flipper to analyse @see Toothpick-di (aka KTP, @see) runtime app scope tree.","title":" init "},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/-init-/#init","text":"KtpFlipperPlugin() A Flipper Plugin for Ktp. KtpFlipperPlugin is a plugin for @see Flipper to analyse @see Toothpick-di (aka KTP, @see) runtime app scope tree.","title":"&lt;init&gt;"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/get-id/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin / getId getId fun getId(): String Setup the unique id of the plugin","title":"Get id"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/get-id/#getid","text":"fun getId(): String Setup the unique id of the plugin","title":"getId"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/on-connect/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin / onConnect onConnect fun onConnect(connection: FlipperConnection?): Unit onConnect is triggered every time the plugin is shown on Flipper It does keep the connection And parse Ktp scope tree to then push it to the Desktop Flipper Client","title":"On connect"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/on-connect/#onconnect","text":"fun onConnect(connection: FlipperConnection?): Unit onConnect is triggered every time the plugin is shown on Flipper It does keep the connection And parse Ktp scope tree to then push it to the Desktop Flipper Client","title":"onConnect"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/on-disconnect/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin / onDisconnect onDisconnect fun onDisconnect(): Unit Release the connection","title":"On disconnect"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/on-disconnect/#ondisconnect","text":"fun onDisconnect(): Unit Release the connection","title":"onDisconnect"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/run-in-background/","text":"flipper-ktp / fr.afaucogney.mobile.flipper / KtpFlipperPlugin / runInBackground runInBackground fun runInBackground(): Boolean Plugin doesn't run in background","title":"Run in background"},{"location":"api/flipper-ktp/fr.afaucogney.mobile.flipper/-ktp-flipper-plugin/run-in-background/#runinbackground","text":"fun runInBackground(): Boolean Plugin doesn't run in background","title":"runInBackground"}]}